# Generated by Django 4.2.5 on 2023-09-21 21:54

import baseapp.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('name', models.CharField(blank=True, max_length=250, verbose_name='Имя')),
                ('avatar', models.ImageField(blank=True, upload_to=baseapp.models.user_directory_path, verbose_name='Аватар')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Allergy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Аллергия',
                'verbose_name_plural': 'Аллергии',
            },
        ),
        migrations.CreateModel(
            name='Dish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название блюда')),
                ('description', models.TextField(blank=True, max_length=200, verbose_name='Описание')),
                ('recipe', models.TextField(blank=True, verbose_name='Рецепт')),
                ('image', models.ImageField(upload_to='dishes_images', verbose_name='Картинка')),
                ('is_free', models.BooleanField(default=False, verbose_name='Бесплатное')),
            ],
            options={
                'verbose_name': 'Блюдо',
                'verbose_name_plural': 'Блюда',
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название ингредиента')),
                ('calories', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Количество калорий')),
                ('price', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Цена ингредиента')),
            ],
            options={
                'verbose_name': 'Ингредиент',
                'verbose_name_plural': 'Ингредиенты',
            },
        ),
        migrations.CreateModel(
            name='MealType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('price', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Цена')),
            ],
            options={
                'verbose_name': 'Тип приема пищи',
                'verbose_name_plural': 'Типы приемов пищи',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания подписки')),
                ('expires_at', models.DateTimeField(verbose_name='Дата истечения подписки')),
                ('portion_quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Количество персон')),
                ('allergies', models.ManyToManyField(blank=True, null=True, related_name='allergy_subscriptions', to='baseapp.allergy', verbose_name='Аллергии')),
                ('meal_types', models.ManyToManyField(blank=True, null=True, related_name='subscriptions', to='baseapp.mealtype', verbose_name='Типы приемов пищи')),
                ('today_dishes', models.ManyToManyField(blank=True, null=True, related_name='dish_subscriptions', to='baseapp.dish', verbose_name='Сегодняшние блюда подписки')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Подписка',
                'verbose_name_plural': 'Подписки',
            },
        ),
        migrations.CreateModel(
            name='MenuCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('dish', models.ManyToManyField(related_name='menu_categories', to='baseapp.dish', verbose_name='Блюдо')),
            ],
            options={
                'verbose_name': 'Вид диеты',
                'verbose_name_plural': 'Виды диеты',
            },
        ),
        migrations.CreateModel(
            name='DishIngredientItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Количество ингредиента')),
                ('measurement', models.CharField(max_length=50, verbose_name='Мера ингредиента')),
                ('dish', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dish_items', to='baseapp.dish', verbose_name='Блюдо')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredient_items', to='baseapp.ingredient', verbose_name='Ингредиент')),
            ],
            options={
                'verbose_name': 'Ингредиент в блюде',
                'verbose_name_plural': 'Ингредиенты в блюде',
            },
        ),
        migrations.AddField(
            model_name='dish',
            name='meal_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dishes', to='baseapp.mealtype', verbose_name='Тип приема пищи'),
        ),
        migrations.AddField(
            model_name='allergy',
            name='ingredients',
            field=models.ManyToManyField(related_name='allergies', to='baseapp.ingredient', verbose_name='Подходящие ингредиенты'),
        ),
    ]
